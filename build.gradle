import groovy.text.SimpleTemplateEngine
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'groovy'
    id 'application'
    id 'maven'
    id 'org.javamodularity.moduleplugin' version '1.6.0'
    id "com.jfrog.bintray" version "1.8.4"
}

group 'com.athaydes.logfx'
version '1.0-RC12'
description 'A beautiful log viewer capable of handling large files'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

mainClassName = "com.athaydes.logfx/com.athaydes.logfx.LogFX"

repositories {
    mavenLocal()
    jcenter()
}

tasks.withType( JavaCompile ) {
    options.encoding = 'UTF-8'
}

def libs = "${buildDir}/libs"
def image = "${buildDir}/image"
ext.splashImage = "${image}/bin/logfx-logo.png"

task deps {
    doLast {
        copy {
            from configurations.runtimeClasspath
            into libs
        }
    }
}

task copyShellScriptToImage( type: Copy ) {
    from "src/main/sh/logfx${Os.isFamily( Os.FAMILY_WINDOWS ) ? '.bat' : ''}"
    into "$image/bin"
}

task jlink( type: Exec ) {
    dependsOn jar, deps
    finalizedBy copyShellScriptToImage, project( ':splash-maker' ).tasks.withType( JavaExec )
    inputs.files( sourceSets*.allSource )
    outputs.dir( image )
    def options = [
            '--module-path', libs,
            '--vm=server', // options: client|server|minimal|all
            '--add-modules', 'java.base,java.desktop,javafx.controls,jdk.unsupported,jdk.crypto.ec,org.slf4j,' +
                    'com.athaydes.keepup.core,com.athaydes.keepup.bintray,com.athaydes.logfx',
            '--output', image,
            '--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages' ]
    def jlink = System.getProperty( 'java.home' ) + '/bin/jlink'
    commandLine( [ jlink ] + options )
    doFirst { new File( image ).deleteDir() }
}

task packageImage( type: Zip ) {
    outputs.upToDateWhen { false }
    dependsOn jlink
    from image
    into "logfx"
    include '**/*'
    archiveName "logfx-${project.version}.zip"
    destinationDir buildDir
}

task jpackage( type: Exec ) {
    dependsOn jlink
    def osOptions = Os.isFamily( Os.FAMILY_WINDOWS )
            ? [ '--win-per-user-install',
                '--win-dir-chooser',
                '--win-menu',
                '--win-shortcut',
                '--icon', 'src/main/resources/com/athaydes/logfx/images/favicon-small.png' ]
            : Os.isFamily( Os.FAMILY_MAC )
            ? [
            '--icon', 'src/main/resources/com/athaydes/logfx/images/favicon-small.png' ]
            : [ '--linux-menu-group', 'programming',
                '--linux-deb-maintainer', 'renato@athaydes.com',
                '--linux-rpm-license-type', 'GPLv3',
                '--linux-shortcut' ]
    def options = osOptions + [
            '--name', 'logfx',
            '--app-image', image,
            '--app-version', project.version,
            '--copyright', 'Copyright 2017-2020 Renato Athaydes',
            '--description', project.description,
            '--type', 'deb',
            '--vendor', 'Renato Athades',
            '--license-file', 'LICENSE',
            '--dest', buildDir ]
    def jpackage = System.getProperty( 'java.home' ) + '/bin/jpackage'
    commandLine( [ jpackage ] + options )
}

// waiting for bug fix: https://github.com/java9-modularity/gradle-modules-plugin/issues/111
//final generatedJavaSources = "$buildDir/java-generated-sources"

//sourceSets.main.java.srcDir generatedJavaSources

configurations {
    fatJarRuntime
    binaries
}

dependencies {
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.8.0-beta4'
    implementation group: 'com.athaydes.keepup', name: 'keepup-core', version: '1.0-RC4'
    implementation group: 'com.athaydes.keepup', name: 'keepup-bintray', version: '1.0-RC4'

    fatJarRuntime group: 'org.slf4j', name: 'slf4j-api', version: '1.8.0-beta4'

    testImplementation group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.5.10'
    testImplementation group: 'org.spockframework', name: 'spock-core', version: '1.3-groovy-2.5', {
        transitive = false
    }
    testImplementation group: 'com.athaydes', name: 'spock-reports', version: '1.7.1', {
        transitive = false
    }
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'cglib', name: 'cglib-nodep', version: '3.3.0'
    testImplementation group: 'com.google.code.tempus-fugit', name: 'tempus-fugit', version: '1.1'
}

test {
    systemProperty 'logfx.log.target', 'sysout'
    systemProperty 'logfx.log.level', 'info'
    systemProperty 'com.athaydes.spockframework.report.showCodeBlocks', 'true'

    useJUnit()

    moduleOptions {
        runOnClasspath = true
    }

    reports {
        junitXml.enabled( true )
    }
}

task generateJavaSources(
        description: 'Generates Java sources based on the java-templates directory' ) {
    def properties = [ logfxVersion: version ]
    def templates = fileTree( dir: 'src/main/java-templates' )
//    def destination = file( generatedJavaSources )
    def destination = file( 'src/main/java' )

    doLast {
        templates.visit { item ->
            def file = item.file
            if ( file.isFile() ) {
                def transformedTemplate = new SimpleTemplateEngine().createTemplate( file ).make( properties )
                new File( destination, item.relativePath.toString() ).withWriter {
                    transformedTemplate.writeTo it
                }
            } else {
                new File( destination, item.relativePath.toString() ).mkdirs()
            }
        }
    }
}

compileJava.dependsOn generateJavaSources

task fatJar( type: Jar ) {
    manifest {
        attributes 'Implementation-Title': 'LogFX',
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'Renato Athaydes',
                'Main-Class': 'com.athaydes.logfx.LogFX'
    }
    destinationDirectory = buildDir
    classifier "all"
    from {
        configurations.fatJarRuntime.collect {
            if ( it.isDirectory() ) return it
            zipTree( it ).matching {
                // Licenses are acknowledged in our own license file
                exclude 'META-INF/LICENSE'
            }
        }
    }
    // include META-INF/services for logging to work in non-modular setup
    from file( 'splash-maker/src/main/resources' )
    with jar
}

task sourcesJar( type: Jar, dependsOn: classes ) {
    from sourceSets.main.allSource
    classifier "sources"
    extension "jar"
}

task javadocJar( type: Jar ) {
    classifier "javadoc"
    from javadoc
}

/* Publishing config */

artifacts {
    archives javadocJar, sourcesJar, fatJar
    binaries packageImage
}

// add all the info required by Maven Central to the pom
configure( install.repositories.mavenInstaller ) {
    pom.project {
        inceptionYear '2017'
        name project.name
        packaging 'jar'
        description project.description

        url 'https://github.com/renatoathaydes/LogFX'

        scm {
            connection 'git@github.com:renatoathaydes/LogFX.git'
            developerConnection 'git@github.com:renatoathaydes/LogFX.git'
            url 'https://github.com/renatoathaydes/LogFX'
        }

        licenses {
            license {
                name 'GNU General Public License (version 3.0)'
                url 'https://www.gnu.org/licenses/gpl-3.0.txt'
            }
        }

        developers {
            developer {
                id 'renatoathaydes'
                name 'Renato Athaydes'
                email 'renato@athaydes.com'
            }
        }
    }
}

def getSecret = { String projectProperty, String envName ->
    project.hasProperty( projectProperty )
            ? project.property( projectProperty )
            : System.getenv()[ envName ]
}

if ( hasProperty( 'bintrayBinaries' ) ) {
    // Binary Generic Repository Config
    bintray {
        user = getSecret( 'bintrayUserName', 'BINTRAY_USER' )
        key = getSecret( 'bintrayApiKey', 'BINTRAY_KEY' )
        configurations = [ 'binaries' ]
        publish = true
        pkg {
            repo = Os.isFamily( Os.FAMILY_MAC ) ? 'mac' : Os.isFamily( Os.FAMILY_WINDOWS ) ? 'win' : 'linux'
            name = 'logfx'
            licenses = [ 'GPL-3.0' ]
            desc = project.description
            vcsUrl = 'https://github.com/renatoathaydes/LogFX.git'
            websiteUrl = 'https://github.com/renatoathaydes/LogFX'
            issueTrackerUrl = 'https://github.com/renatoathaydes/LogFX/issues'
            labels = [ 'log', 'javafx', 'log-viewer' ]
            publicDownloadNumbers = true

            //noinspection GroovyAssignabilityCheck
            version {
                name = project.version
                vcsTag = project.version
                gpg {
                    sign = true
                }
            }
        }
    }

    bintrayUpload.dependsOn packageImage
} else {
    // Maven Repository Config
    bintray {
        user = getSecret( 'bintrayUserName', 'BINTRAY_USER' )
        key = getSecret( 'bintrayApiKey', 'BINTRAY_KEY' )
        configurations = [ 'archives' ]
        publish = true
        pkg {
            repo = 'maven'
            name = 'logfx'
            licenses = [ 'GPL-3.0' ]
            desc = project.description
            vcsUrl = 'https://github.com/renatoathaydes/LogFX.git'
            websiteUrl = 'https://github.com/renatoathaydes/LogFX'
            issueTrackerUrl = 'https://github.com/renatoathaydes/LogFX/issues'
            labels = [ 'log', 'javafx', 'log-viewer' ]
            publicDownloadNumbers = true

            //noinspection GroovyAssignabilityCheck
            version {
                name = project.version
                vcsTag = project.version
                gpg {
                    sign = true
                }
                mavenCentralSync {
                    sync = true
                    user = project.hasProperty( "ossrhUsername" ) ? ossrhUsername : null
                    password = project.hasProperty( "ossrhPassword" ) ? ossrhPassword : null
                    close = '1' // '0' to NOT close
                }
            }
        }

    }

    bintrayUpload.dependsOn fatJar, sourcesJar, fatJar
}
